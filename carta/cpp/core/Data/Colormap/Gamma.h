/***
 * Generates value for the gamma image transform.
 */

#pragma once

#include "State/ObjectManager.h"
#include "State/StateInterface.h"

namespace Carta {

namespace Data {

class Gamma : public Carta::State::CartaObject {

public:

    /**
     * For a given value of gamma find a reasonable approximate to the (x,y)
     * point in [-1,1]x[-1,1] that maps to it.
     * @param gamma - a gamma value.
     * @return - an (x,y) point that maps to it.
     */
    std::pair<double,double> find( double gamma ) const;

    /**
     * Return a gamma value for an (x,y) coordinate.
     * @param x - an x-coordinate.
     * @param y - a y-coordinate.
     * @return - the gamma value that is generated by (x,y).
     */
    double getGamma(double x, double y) const;

    /**
     * Return an x-value corresponding to the specified y- and
     * gamma values.
     * @param y - a y-coordinatee.
     * @param gamma - a gamma value.
     * @return - an x-coordinate corresponding to the values.
     */
    double getX( double y, double gamma ) const;


    /**
     * Return a y-value corresponding to the specified x- and
     * gamma values.
     * @param x - an x-coordinatee.
     * @param gamma - a gamma value.
     * @return - a y-coordinate corresponding to the values.
     */
    double getY( double x, double gamma ) const;

    virtual ~Gamma();

    const static QString CLASS_NAME;

private:

    void _initializeDefaultState();

    static bool m_registered;

    Gamma( const QString& path, const QString& id );

    class Factory;

    const static int MAX_N_DIG;
    const static int LOWER_BOUND;
    const static int UPPER_BOUND;
    const static int TABLE_SIZE;
    const static QString LEVEL_CURVES;
	Gamma( const Gamma& other);
	Gamma& operator=( const Gamma & other );
};

}
}
